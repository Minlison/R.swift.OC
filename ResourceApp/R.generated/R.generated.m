//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

#import "R.generated.h"

/// NSObject no func and structs

/// This R`R.image.namespace.inner.namespace` struct is generated, and contains static references to 1 images.
@implementation UIImage (R_image_namespace_inner_namespace) 

/// return [[UIImage imageNamed:@"first"] imageWithRenderingMode:renderingMode];
+ (UIImage *)first {
     return [[UIImage imageNamed:@"first"] imageWithRenderingMode:UIImageRenderingModeAutomatic];
}

/// return [[UIImage imageNamed:@"first"] imageWithRenderingMode:renderingMode];
+ (UIImage *)firstRenderingMode:(UIImageRenderingMode)renderingMode {
     return [[UIImage imageNamed:@"first"] imageWithRenderingMode:renderingMode];
}
@end



/// This R`R.nib` struct is generated, and contains static references to 10 nibs.
@implementation UINib (NibExternal) 

/// `[UINib nibWithNibName:@"ADuplicateCellView" bundle:nil]`
+ (UINib *)aDuplicateCellView {
     return [UINib nibWithNibName:@"ADuplicateCellView" bundle:nil];
}


/// `[UINib nibWithNibName:@"CellCollectionView" bundle:nil]`
+ (UINib *)cellCollectionView {
     return [UINib nibWithNibName:@"CellCollectionView" bundle:nil];
}


/// `[UINib nibWithNibName:@"CellView" bundle:nil]`
+ (UINib *)cellView {
     return [UINib nibWithNibName:@"CellView" bundle:nil];
}


/// `[UINib nibWithNibName:@"DuplicateCellView" bundle:nil]`
+ (UINib *)duplicateCellView {
     return [UINib nibWithNibName:@"DuplicateCellView" bundle:nil];
}


/// `[UINib nibWithNibName:@"LaunchScreen" bundle:nil]`
+ (UINib *)launchScreen {
     return [UINib nibWithNibName:@"LaunchScreen" bundle:nil];
}


/// `[UINib nibWithNibName:@"My View" bundle:nil]`
+ (UINib *)myView {
     return [UINib nibWithNibName:@"My View" bundle:nil];
}


/// `[UINib nibWithNibName:@"RelativeToProject" bundle:nil]`
+ (UINib *)relativeToProject {
     return [UINib nibWithNibName:@"RelativeToProject" bundle:nil];
}


/// `[UINib nibWithNibName:@"SupplementaryElement" bundle:nil]`
+ (UINib *)supplementaryElement {
     return [UINib nibWithNibName:@"SupplementaryElement" bundle:nil];
}


/// `[UINib nibWithNibName:@"WhitespaceReuseIdentifer" bundle:nil]`
+ (UINib *)whitespaceReuseIdentifer {
     return [UINib nibWithNibName:@"WhitespaceReuseIdentifer" bundle:nil];
}


/// `[UINib nibWithNibName:@"Xib with ViewController" bundle:nil]`
+ (UINib *)xibWithViewController {
     return [UINib nibWithNibName:@"Xib with ViewController" bundle:nil];
}
@end



/// This `R.color.myRSwiftColors` struct is generated, and contains static references to 5 colors.
@implementation UIColor (MyRSwiftColors) 

/// <span style='background-color: #6A6A6A4C; color: #959595; padding: 1px 3px;'>#6A6A6A4C</span> See-through gray
/// 
/// [UIColor colorWithRed:0.41758814454078674 green:0.41758814454078674 blue:0.41758814454078674 alpha:0.2982758581638336];
+ (UIColor *)seeThroughGray {
     return [UIColor colorWithRed:0.41758814454078674 green:0.41758814454078674 blue:0.41758814454078674 alpha:0.2982758581638336];
}


/// <span style='background-color: #B6FFAB; color: #490054; padding: 1px 3px;'>#B6FFAB</span> All is A-OK
/// 
/// [UIColor colorWithRed:0.7140880823135376 green:1.0 blue:0.6687110066413879 alpha:1.0];
+ (UIColor *)allIsAOK {
     return [UIColor colorWithRed:0.7140880823135376 green:1.0 blue:0.6687110066413879 alpha:1.0];
}


/// <span style='background-color: #FF8A7E; color: #007581; padding: 1px 3px;'>#FF8A7E</span> Severe error
/// 
/// [UIColor colorWithRed:1.0 green:0.542837381362915 blue:0.4926460087299347 alpha:1.0];
+ (UIColor *)severeError {
     return [UIColor colorWithRed:1.0 green:0.542837381362915 blue:0.4926460087299347 alpha:1.0];
}


/// <span style='background-color: #FFEBA2; color: #00145D; padding: 1px 3px;'>#FFEBA2</span> Warning
/// 
/// [UIColor colorWithRed:1.0 green:0.9210211634635925 blue:0.6361839175224304 alpha:1.0];
+ (UIColor *)warning {
     return [UIColor colorWithRed:1.0 green:0.9210211634635925 blue:0.6361839175224304 alpha:1.0];
}


/// <span style='background-color: #FFFCF9; color: #000306; padding: 1px 3px;'>#FFFCF9</span> Slightly off-white
/// 
/// [UIColor colorWithRed:1.0 green:0.9882352948188782 blue:0.9764705896377563 alpha:1.0];
+ (UIColor *)slightlyOffWhite {
     return [UIColor colorWithRed:1.0 green:0.9882352948188782 blue:0.9764705896377563 alpha:1.0];
}
@end



/// This `R.font` struct is generated, and contains static references to 5 fonts.
@implementation UIFont (Font) 

/// `UIFont(name: "AveriaLibre-Bold", size: ...)`
+ (UIFont *)averiaLibreBoldSize:(CGFloat)size {
     return [UIFont fontWithName:@"averiaLibreBold" size:size];
}


/// `UIFont(name: "AveriaLibre-BoldItalic", size: ...)`
+ (UIFont *)averiaLibreBoldItalicSize:(CGFloat)size {
     return [UIFont fontWithName:@"averiaLibreBoldItalic" size:size];
}


/// `UIFont(name: "AveriaLibre-Light", size: ...)`
+ (UIFont *)averiaLibreLightSize:(CGFloat)size {
     return [UIFont fontWithName:@"averiaLibreLight" size:size];
}


/// `UIFont(name: "AveriaLibre-Regular", size: ...)`
+ (UIFont *)averiaLibreRegularSize:(CGFloat)size {
     return [UIFont fontWithName:@"averiaLibreRegular" size:size];
}


/// `UIFont(name: "GoudyBookletter1911", size: ...)`
+ (UIFont *)goudyBookletter1911Size:(CGFloat)size {
     return [UIFont fontWithName:@"goudyBookletter1911" size:size];
}
@end



/// This `R.string.generic` struct is generated, and contains static references to 13 localization keys.
@implementation NSString (Generic) 

/// Value: Lorem ipsum dolor sit amet, consectetur adipiscing elit.
+ (NSString *)loremipsum {
     return NSLocalizedStringWithDefaultValue(@"loremipsum",@"Generic",[NSBundle mainBundle],nil,@"");
}


/// Value: Pre Alpha (| %#@first@ |)
+ (NSString *)correctAlphaFirst:(int)value1 {
     return [NSString localizedStringWithFormat:NSLocalizedStringWithDefaultValue(@"correct alpha",@"Generic",[NSBundle mainBundle],nil,@""),value1];
}


/// Value: Pre Beta (| %#@first@ x %#@second@ |)
+ (NSString *)correctBetaFirst:(int)value1 Second:(int)value2 {
     return [NSString localizedStringWithFormat:NSLocalizedStringWithDefaultValue(@"correct beta",@"Generic",[NSBundle mainBundle],nil,@""),value1, value2];
}


/// Value: Pre Delta (| %#@first@ |)
+ (NSString *)correctDeltaFirst:(int)value1 Second:(int)value2 {
     return [NSString localizedStringWithFormat:NSLocalizedStringWithDefaultValue(@"correct delta",@"Generic",[NSBundle mainBundle],nil,@""),value1, value2];
}


/// Value: Pre Epsilon (| %#@first@ |)
+ (NSString *)correctEpsilonFirst:(int)value1 Second:(int)value2 {
     return [NSString localizedStringWithFormat:NSLocalizedStringWithDefaultValue(@"correct epsilon",@"Generic",[NSBundle mainBundle],nil,@""),value1, value2];
}


/// Value: Pre Eta (| %@ - %#@second@ - %d|)
+ (NSString *)correctEtaValue1:(NSString *)value1 Second:(int)value2 Value3:(int)value3 {
     return [NSString localizedStringWithFormat:NSLocalizedStringWithDefaultValue(@"correct eta",@"Generic",[NSBundle mainBundle],nil,@""),value1, value2, value3];
}


/// Value: Pre Gamma (| %2$#@second@ x %1$#@first@ |)
+ (NSString *)correctGammaFirst:(int)value1 Second:(int)value2 {
     return [NSString localizedStringWithFormat:NSLocalizedStringWithDefaultValue(@"correct gamma",@"Generic",[NSBundle mainBundle],nil,@""),value1, value2];
}


/// Value: Pre Theta (| %#@first@ |)
+ (NSString *)correctThetaFirst:(int)value1 Second:(int)value2 Third:(int)value3 {
     return [NSString localizedStringWithFormat:NSLocalizedStringWithDefaultValue(@"correct theta",@"Generic",[NSBundle mainBundle],nil,@""),value1, value2, value3];
}


/// Value: Pre Zeta (| %@ %2$#@second@ |)
+ (NSString *)correctZetaValue1:(NSString *)value1 Second:(int)value2 {
     return [NSString localizedStringWithFormat:NSLocalizedStringWithDefaultValue(@"correct zeta",@"Generic",[NSBundle mainBundle],nil,@""),value1, value2];
}


/// Value: four  - %.2f
+ (NSString *)precision4Value1:(double)value1 {
     return [NSString localizedStringWithFormat:NSLocalizedStringWithDefaultValue(@"precision4",@"Generic",[NSBundle mainBundle],nil,@""),value1];
}


/// Value: one   - %012.2f
+ (NSString *)precision1Value1:(double)value1 {
     return [NSString localizedStringWithFormat:NSLocalizedStringWithDefaultValue(@"precision1",@"Generic",[NSBundle mainBundle],nil,@""),value1];
}


/// Value: three - %12.4f
+ (NSString *)precision3Value1:(double)value1 {
     return [NSString localizedStringWithFormat:NSLocalizedStringWithDefaultValue(@"precision3",@"Generic",[NSBundle mainBundle],nil,@""),value1];
}


/// Value: two   - %12.2f
+ (NSString *)precision2Value1:(double)value1 {
     return [NSString localizedStringWithFormat:NSLocalizedStringWithDefaultValue(@"precision2",@"Generic",[NSBundle mainBundle],nil,@""),value1];
}
@end



/// This `R.string.localizable` struct is generated, and contains static references to 4 localization keys.
@implementation NSString (Localizable) 

/// en translation: 2
/// 
/// Locales: en, es, ja
+ (NSString *)two {
     return NSLocalizedStringWithDefaultValue(@"two",nil,[NSBundle mainBundle],nil,@"");
}


/// en translation: One
/// 
/// Locales: en, es, ja
+ (NSString *)one {
     return NSLocalizedStringWithDefaultValue(@"one",nil,[NSBundle mainBundle],nil,@"");
}


/// en translation: There are %d lights!
/// 
/// Locales: en, es, ja
+ (NSString *)quoteValue1:(int)value1 {
     return [NSString localizedStringWithFormat:NSLocalizedStringWithDefaultValue(@"quote",nil,[NSBundle mainBundle],nil,@""),value1];
}


/// ja translation: Not translated in other languages, and there is no Base
/// 
/// Locales: ja
+ (NSString *)japaneseOnly {
     return NSLocalizedStringWithDefaultValue(@"japanese only",nil,[NSBundle mainBundle],nil,@"");
}
@end



/// This `R.string.settings` struct is generated, and contains static references to 10 localization keys.
@implementation NSString (Settings) 

/// Base translation: %1$#@lu_completed_runs@
/// 
/// Locales: Base, nl
+ (NSString *)scopeLuOutOfLuRunsLu_completed_runs:(uint)value1 Lu_total_runs:(uint)value2 {
     return [NSString localizedStringWithFormat:NSLocalizedStringWithDefaultValue(@"scope.%lu out of %lu runs",@"Settings",[NSBundle mainBundle],@"%1$#@lu_completed_runs@",@""),value1, value2];
}


/// Base translation: %1$d of %2$i files copied, %3$f.2%% completed.
/// 
/// Locales: Base, nl
+ (NSString *)copyProgressValue1:(int)value1 Value2:(int)value2 Value3:(double)value3 {
     return [NSString localizedStringWithFormat:NSLocalizedStringWithDefaultValue(@"Copy.Progress",@"Settings",[NSBundle mainBundle],@"%1$d of %2$i files copied, %3$f.2%% completed.",@""),value1, value2, value3];
}


/// Base translation: ABC "\DEF/" GHI Base
/// 
/// Locales: Base, nl
+ (NSString *)multilineKeyWeird {
     return NSLocalizedStringWithDefaultValue(@"Multiline\t\\key/\n\"weird\"?!",@"Settings",[NSBundle mainBundle],@"ABC\n\"\\DEF/\"\nGHI Base",@"");
}


/// Base translation: Base %#@first@
/// 
/// Locales: Base
+ (NSString *)incorrectInDutchFirst:(int)value1 {
     return [NSString localizedStringWithFormat:NSLocalizedStringWithDefaultValue(@"incorrect in dutch",@"Settings",[NSBundle mainBundle],@"Base %#@first@",@""),value1];
}


/// Base translation: Base language; Not translated
/// 
/// Locales: Base
+ (NSString *)notTranslated {
     return NSLocalizedStringWithDefaultValue(@"Not translated",@"Settings",[NSBundle mainBundle],@"Base language; Not translated",@"");
}


/// Base translation: Nothing
/// 
/// Locales: Base, nl
+ (NSString *)formatSpecifiers3Value1:(int)value1 Value2:(int)value2 Value3:(NSString *)value3 {
     return [NSString localizedStringWithFormat:NSLocalizedStringWithDefaultValue(@"FormatSpecifiers3",@"Settings",[NSBundle mainBundle],@"Nothing",@""),value1, value2, value3];
}


/// Base translation: Settings
/// 
/// Locales: Base, nl
+ (NSString *)title {
     return NSLocalizedStringWithDefaultValue(@"Title",@"Settings",[NSBundle mainBundle],@"Settings",@"");
}


/// Base translation: We need a couple things before you get started.
/// 
/// Locales: Base, nl
+ (NSString *)weNeedACoupleThingsBeforeYouGetStarted {
     return NSLocalizedStringWithDefaultValue(@"We need a couple things\r\nbefore you get started.",@"Settings",[NSBundle mainBundle],@"We need a couple things\r\nbefore you get started.",@"");
}


/// Base translation: number 1: %1$d
/// 
/// Locales: Base, nl
+ (NSString *)formatSpecifiers4Value1:(int)value1 Value2:(int)value2 Value3:(NSString *)value3 {
     return [NSString localizedStringWithFormat:NSLocalizedStringWithDefaultValue(@"FormatSpecifiers4",@"Settings",[NSBundle mainBundle],@"number 1: %1$d",@""),value1, value2, value3];
}


/// Base translation: number 1: %d, number 2: %i, string 3: %@
/// 
/// Locales: Base, nl
+ (NSString *)formatSpecifiers1Value1:(int)value1 Value2:(int)value2 Value3:(NSString *)value3 {
     return [NSString localizedStringWithFormat:NSLocalizedStringWithDefaultValue(@"FormatSpecifiers1",@"Settings",[NSBundle mainBundle],@"number 1: %d, number 2: %i, string 3: %@",@""),value1, value2, value3];
}
@end



@implementation UINib (_ADuplicateCellView) 

+ (UITableViewCell *)firstViewOwnerOrNil:(id)ownerOrNil OptionsOrNil:(NSDictionary *)optionsOrNil {
     return [[UINib alloc] instantiateWithOwner:ownerOrNil options:optionsOrNil][0];
}

+ (UITableViewCell *)firstViewOwnerOrNil:(id)ownerOrNil {
     return [[UINib alloc] instantiateWithOwner:ownerOrNil options:nil][0];
}

+ (UITableViewCell *)firstViewOptionsOrNil:(NSDictionary *)optionsOrNil {
     return [[UINib alloc] instantiateWithOwner:nil options:optionsOrNil][0];
}
@end



@implementation UINib (_CellCollectionView) 

+ (UICollectionViewCell *)firstViewOptionsOrNil:(NSDictionary *)optionsOrNil {
     return [[UINib alloc] instantiateWithOwner:nil options:optionsOrNil][0];
}

+ (UICollectionViewCell *)firstViewOwnerOrNil:(id)ownerOrNil OptionsOrNil:(NSDictionary *)optionsOrNil {
     return [[UINib alloc] instantiateWithOwner:ownerOrNil options:optionsOrNil][0];
}

+ (UICollectionViewCell *)firstViewOwnerOrNil:(id)ownerOrNil {
     return [[UINib alloc] instantiateWithOwner:ownerOrNil options:nil][0];
}
@end



@implementation UINib (_CellView) 

+ (UITableViewCell *)firstViewOptionsOrNil:(NSDictionary *)optionsOrNil {
     return [[UINib alloc] instantiateWithOwner:nil options:optionsOrNil][0];
}

+ (UITableViewCell *)firstViewOwnerOrNil:(id)ownerOrNil OptionsOrNil:(NSDictionary *)optionsOrNil {
     return [[UINib alloc] instantiateWithOwner:ownerOrNil options:optionsOrNil][0];
}

+ (UITableViewCell *)firstViewOwnerOrNil:(id)ownerOrNil {
     return [[UINib alloc] instantiateWithOwner:ownerOrNil options:nil][0];
}
@end



@implementation UINib (_DuplicateCellView) 

+ (UITableViewCell *)firstViewOwnerOrNil:(id)ownerOrNil {
     return [[UINib alloc] instantiateWithOwner:ownerOrNil options:nil][0];
}

+ (UITableViewCell *)firstViewOptionsOrNil:(NSDictionary *)optionsOrNil {
     return [[UINib alloc] instantiateWithOwner:nil options:optionsOrNil][0];
}

+ (UITableViewCell *)firstViewOwnerOrNil:(id)ownerOrNil OptionsOrNil:(NSDictionary *)optionsOrNil {
     return [[UINib alloc] instantiateWithOwner:ownerOrNil options:optionsOrNil][0];
}
@end



@implementation UINib (_LaunchScreen) 

+ (UIView *)firstViewOptionsOrNil:(NSDictionary *)optionsOrNil {
     return [[UINib alloc] instantiateWithOwner:nil options:optionsOrNil][0];
}

+ (UIView *)firstViewOwnerOrNil:(id)ownerOrNil {
     return [[UINib alloc] instantiateWithOwner:ownerOrNil options:nil][0];
}

+ (UIView *)firstViewOwnerOrNil:(id)ownerOrNil OptionsOrNil:(NSDictionary *)optionsOrNil {
     return [[UINib alloc] instantiateWithOwner:ownerOrNil options:optionsOrNil][0];
}
@end



@implementation UINib (_MyView) 

+ (UIView *)firstViewOwnerOrNil:(id)ownerOrNil {
     return [[UINib alloc] instantiateWithOwner:ownerOrNil options:nil][0];
}

+ (UIView *)firstViewOptionsOrNil:(NSDictionary *)optionsOrNil {
     return [[UINib alloc] instantiateWithOwner:nil options:optionsOrNil][0];
}

+ (UIView *)firstViewOwnerOrNil:(id)ownerOrNil OptionsOrNil:(NSDictionary *)optionsOrNil {
     return [[UINib alloc] instantiateWithOwner:ownerOrNil options:optionsOrNil][0];
}
@end



@implementation UINib (_RelativeToProject) 

+ (UIView *)firstViewOwnerOrNil:(id)ownerOrNil {
     return [[UINib alloc] instantiateWithOwner:ownerOrNil options:nil][0];
}

+ (UIView *)firstViewOptionsOrNil:(NSDictionary *)optionsOrNil {
     return [[UINib alloc] instantiateWithOwner:nil options:optionsOrNil][0];
}

+ (UIView *)firstViewOwnerOrNil:(id)ownerOrNil OptionsOrNil:(NSDictionary *)optionsOrNil {
     return [[UINib alloc] instantiateWithOwner:ownerOrNil options:optionsOrNil][0];
}
@end



@implementation UINib (_SupplementaryElement) 

+ (UICollectionReusableView *)firstViewOwnerOrNil:(id)ownerOrNil OptionsOrNil:(NSDictionary *)optionsOrNil {
     return [[UINib alloc] instantiateWithOwner:ownerOrNil options:optionsOrNil][0];
}

+ (UICollectionReusableView *)firstViewOptionsOrNil:(NSDictionary *)optionsOrNil {
     return [[UINib alloc] instantiateWithOwner:nil options:optionsOrNil][0];
}

+ (UICollectionReusableView *)firstViewOwnerOrNil:(id)ownerOrNil {
     return [[UINib alloc] instantiateWithOwner:ownerOrNil options:nil][0];
}
@end



@implementation UINib (_WhitespaceReuseIdentifer) 

+ (UITableViewCell *)firstViewOptionsOrNil:(NSDictionary *)optionsOrNil {
     return [[UINib alloc] instantiateWithOwner:nil options:optionsOrNil][0];
}

+ (UITableViewCell *)firstViewOwnerOrNil:(id)ownerOrNil {
     return [[UINib alloc] instantiateWithOwner:ownerOrNil options:nil][0];
}

+ (UITableViewCell *)firstViewOwnerOrNil:(id)ownerOrNil OptionsOrNil:(NSDictionary *)optionsOrNil {
     return [[UINib alloc] instantiateWithOwner:ownerOrNil options:optionsOrNil][0];
}
@end



@implementation UINib (_XibWithViewController) 

+ (FirstViewController *)firstViewOwnerOrNil:(id)ownerOrNil OptionsOrNil:(NSDictionary *)optionsOrNil {
     return [[UINib alloc] instantiateWithOwner:ownerOrNil options:optionsOrNil][0];
}

+ (FirstViewController *)firstViewOwnerOrNil:(id)ownerOrNil {
     return [[UINib alloc] instantiateWithOwner:ownerOrNil options:nil][0];
}

+ (FirstViewController *)firstViewOptionsOrNil:(NSDictionary *)optionsOrNil {
     return [[UINib alloc] instantiateWithOwner:nil options:optionsOrNil][0];
}


+ (UIView *)secondViewOptionsOrNil:(NSDictionary *)optionsOrNil {
     return [[UINib alloc] instantiateWithOwner:nil options:optionsOrNil][1];
}

+ (UIView *)secondViewOwnerOrNil:(id)ownerOrNil OptionsOrNil:(NSDictionary *)optionsOrNil {
     return [[UINib alloc] instantiateWithOwner:ownerOrNil options:optionsOrNil][1];
}

+ (UIView *)secondViewOwnerOrNil:(id)ownerOrNil {
     return [[UINib alloc] instantiateWithOwner:ownerOrNil options:nil][1];
}
@end


