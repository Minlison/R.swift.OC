//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

#import "R_String.h"

/// This `.string.generic` struct is generated, and contains static references to 13 localization keys.
@implementation NSString (Generic) 

/// Value: Lorem ipsum dolor sit amet, consectetur adipiscing elit.
+ (NSString *)loremipsum {
     return NSLocalizedStringWithDefaultValue(@"loremipsum",@"Generic",[NSBundle mainBundle],nil,@"");
}


/// Value: Pre Alpha (| %#@first@ |)
+ (NSString *)correctAlphaFirst:(int)value1 {
     return [NSString localizedStringWithFormat:NSLocalizedStringWithDefaultValue(@"correct alpha",@"Generic",[NSBundle mainBundle],nil,@""),value1];
}


/// Value: Pre Beta (| %#@first@ x %#@second@ |)
+ (NSString *)correctBetaFirst:(int)value1 Second:(int)value2 {
     return [NSString localizedStringWithFormat:NSLocalizedStringWithDefaultValue(@"correct beta",@"Generic",[NSBundle mainBundle],nil,@""),value1, value2];
}


/// Value: Pre Delta (| %#@first@ |)
+ (NSString *)correctDeltaFirst:(int)value1 Second:(int)value2 {
     return [NSString localizedStringWithFormat:NSLocalizedStringWithDefaultValue(@"correct delta",@"Generic",[NSBundle mainBundle],nil,@""),value1, value2];
}


/// Value: Pre Epsilon (| %#@first@ |)
+ (NSString *)correctEpsilonFirst:(int)value1 Second:(int)value2 {
     return [NSString localizedStringWithFormat:NSLocalizedStringWithDefaultValue(@"correct epsilon",@"Generic",[NSBundle mainBundle],nil,@""),value1, value2];
}


/// Value: Pre Eta (| %@ - %#@second@ - %d|)
+ (NSString *)correctEta_:(NSString *)value1 Second:(int)value2 _:(int)value3 {
     return [NSString localizedStringWithFormat:NSLocalizedStringWithDefaultValue(@"correct eta",@"Generic",[NSBundle mainBundle],nil,@""),value1, value2, value3];
}


/// Value: Pre Gamma (| %2$#@second@ x %1$#@first@ |)
+ (NSString *)correctGammaFirst:(int)value1 Second:(int)value2 {
     return [NSString localizedStringWithFormat:NSLocalizedStringWithDefaultValue(@"correct gamma",@"Generic",[NSBundle mainBundle],nil,@""),value1, value2];
}


/// Value: Pre Theta (| %#@first@ |)
+ (NSString *)correctThetaFirst:(int)value1 Second:(int)value2 Third:(int)value3 {
     return [NSString localizedStringWithFormat:NSLocalizedStringWithDefaultValue(@"correct theta",@"Generic",[NSBundle mainBundle],nil,@""),value1, value2, value3];
}


/// Value: Pre Zeta (| %@ %2$#@second@ |)
+ (NSString *)correctZeta_:(NSString *)value1 Second:(int)value2 {
     return [NSString localizedStringWithFormat:NSLocalizedStringWithDefaultValue(@"correct zeta",@"Generic",[NSBundle mainBundle],nil,@""),value1, value2];
}


/// Value: four  - %.2f
+ (NSString *)precision4_:(double)value1 {
     return [NSString localizedStringWithFormat:NSLocalizedStringWithDefaultValue(@"precision4",@"Generic",[NSBundle mainBundle],nil,@""),value1];
}


/// Value: one   - %012.2f
+ (NSString *)precision1_:(double)value1 {
     return [NSString localizedStringWithFormat:NSLocalizedStringWithDefaultValue(@"precision1",@"Generic",[NSBundle mainBundle],nil,@""),value1];
}


/// Value: three - %12.4f
+ (NSString *)precision3_:(double)value1 {
     return [NSString localizedStringWithFormat:NSLocalizedStringWithDefaultValue(@"precision3",@"Generic",[NSBundle mainBundle],nil,@""),value1];
}


/// Value: two   - %12.2f
+ (NSString *)precision2_:(double)value1 {
     return [NSString localizedStringWithFormat:NSLocalizedStringWithDefaultValue(@"precision2",@"Generic",[NSBundle mainBundle],nil,@""),value1];
}
@end



/// This `.string.localizable` struct is generated, and contains static references to 4 localization keys.
@implementation NSString (Localizable) 

/// en translation: 2
/// 
/// Locales: en, es, ja
+ (NSString *)two {
     return NSLocalizedStringWithDefaultValue(@"two",nil,[NSBundle mainBundle],nil,@"");
}


/// en translation: One
/// 
/// Locales: en, es, ja
+ (NSString *)one {
     return NSLocalizedStringWithDefaultValue(@"one",nil,[NSBundle mainBundle],nil,@"");
}


/// en translation: There are %d lights!
/// 
/// Locales: en, es, ja
+ (NSString *)quote_:(int)value1 {
     return [NSString localizedStringWithFormat:NSLocalizedStringWithDefaultValue(@"quote",nil,[NSBundle mainBundle],nil,@""),value1];
}


/// ja translation: Not translated in other languages, and there is no Base
/// 
/// Locales: ja
+ (NSString *)japaneseOnly {
     return NSLocalizedStringWithDefaultValue(@"japanese only",nil,[NSBundle mainBundle],nil,@"");
}
@end



/// This `.string.settings` struct is generated, and contains static references to 10 localization keys.
@implementation NSString (Settings) 

/// Base translation: %1$#@lu_completed_runs@
/// 
/// Locales: Base, nl
+ (NSString *)scopeLuOutOfLuRunsLu_completed_runs:(uint)value1 Lu_total_runs:(uint)value2 {
     return [NSString localizedStringWithFormat:NSLocalizedStringWithDefaultValue(@"scope.%lu out of %lu runs",@"Settings",[NSBundle mainBundle],@"%1$#@lu_completed_runs@",@""),value1, value2];
}


/// Base translation: %1$d of %2$i files copied, %3$f.2%% completed.
/// 
/// Locales: Base, nl
+ (NSString *)copyProgress_:(int)value1 _:(int)value2 _:(double)value3 {
     return [NSString localizedStringWithFormat:NSLocalizedStringWithDefaultValue(@"Copy.Progress",@"Settings",[NSBundle mainBundle],@"%1$d of %2$i files copied, %3$f.2%% completed.",@""),value1, value2, value3];
}


/// Base translation: ABC "\DEF/" GHI Base
/// 
/// Locales: Base, nl
+ (NSString *)multilineKeyWeird {
     return NSLocalizedStringWithDefaultValue(@"Multiline\t\\key/\n\"weird\"?!",@"Settings",[NSBundle mainBundle],@"ABC\n\"\\DEF/\"\nGHI Base",@"");
}


/// Base translation: Base %#@first@
/// 
/// Locales: Base
+ (NSString *)incorrectInDutchFirst:(int)value1 {
     return [NSString localizedStringWithFormat:NSLocalizedStringWithDefaultValue(@"incorrect in dutch",@"Settings",[NSBundle mainBundle],@"Base %#@first@",@""),value1];
}


/// Base translation: Base language; Not translated
/// 
/// Locales: Base
+ (NSString *)notTranslated {
     return NSLocalizedStringWithDefaultValue(@"Not translated",@"Settings",[NSBundle mainBundle],@"Base language; Not translated",@"");
}


/// Base translation: Nothing
/// 
/// Locales: Base, nl
+ (NSString *)formatSpecifiers3_:(int)value1 _:(int)value2 _:(NSString *)value3 {
     return [NSString localizedStringWithFormat:NSLocalizedStringWithDefaultValue(@"FormatSpecifiers3",@"Settings",[NSBundle mainBundle],@"Nothing",@""),value1, value2, value3];
}


/// Base translation: Settings
/// 
/// Locales: Base, nl
+ (NSString *)title {
     return NSLocalizedStringWithDefaultValue(@"Title",@"Settings",[NSBundle mainBundle],@"Settings",@"");
}


/// Base translation: We need a couple things before you get started.
/// 
/// Locales: Base, nl
+ (NSString *)weNeedACoupleThingsBeforeYouGetStarted {
     return NSLocalizedStringWithDefaultValue(@"We need a couple things\r\nbefore you get started.",@"Settings",[NSBundle mainBundle],@"We need a couple things\r\nbefore you get started.",@"");
}


/// Base translation: number 1: %1$d
/// 
/// Locales: Base, nl
+ (NSString *)formatSpecifiers4_:(int)value1 _:(int)value2 _:(NSString *)value3 {
     return [NSString localizedStringWithFormat:NSLocalizedStringWithDefaultValue(@"FormatSpecifiers4",@"Settings",[NSBundle mainBundle],@"number 1: %1$d",@""),value1, value2, value3];
}


/// Base translation: number 1: %d, number 2: %i, string 3: %@
/// 
/// Locales: Base, nl
+ (NSString *)formatSpecifiers1_:(int)value1 _:(int)value2 _:(NSString *)value3 {
     return [NSString localizedStringWithFormat:NSLocalizedStringWithDefaultValue(@"FormatSpecifiers1",@"Settings",[NSBundle mainBundle],@"number 1: %d, number 2: %i, string 3: %@",@""),value1, value2, value3];
}
@end


