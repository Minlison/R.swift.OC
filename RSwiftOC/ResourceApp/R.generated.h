//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

#import <Foundation/Foundation.h>
#import <SWRevealViewController/SWRevealViewController.h>
#import <UIKit/UIKit.h>

/// This `R` struct is generated and contains references to static resources.

  
    
  
  
  /// This `R.color` struct is generated, and contains static references to 2 color palettes.
  
    /// This `R.color.myRSwiftColors` struct is generated, and contains static references to 5 colors.
    
      /// <span style='background-color: #6A6A6A4C; color: #959595; padding: 1px 3px;'>#6A6A6A4C</span> See-through gray
       #define seeThroughGray  @"0x6A6A6A4C"
      /// <span style='background-color: #B6FFAB; color: #490054; padding: 1px 3px;'>#B6FFAB</span> All is A-OK
       #define allIsAOK  @"0xB6FFAB"
      /// <span style='background-color: #FF8A7E; color: #007581; padding: 1px 3px;'>#FF8A7E</span> Severe error
       #define severeError  @"0xFF8A7E"
      /// <span style='background-color: #FFEBA2; color: #00145D; padding: 1px 3px;'>#FFEBA2</span> Warning
       #define warning  @"0xFFEBA2"
      /// <span style='background-color: #FFFCF9; color: #000306; padding: 1px 3px;'>#FFFCF9</span> Slightly off-white
       #define slightlyOffWhite  @"0xFFFCF9"
      
      /// <span style='background-color: #6A6A6A4C; color: #959595; padding: 1px 3px;'>#6A6A6A4C</span> See-through gray
      /// 
      /// UIColor(red: 0.417588144540787, green: 0.417588144540787, blue: 0.417588144540787, alpha: 0.298275858163834)
      static inline  UIColor *seeThroughGray() {
          return [UIColor colorWithRed:0.417588144540787 green:0.417588144540787 blue:0.417588144540787 alpha:0.298275858163834];
      }
      
      /// <span style='background-color: #B6FFAB; color: #490054; padding: 1px 3px;'>#B6FFAB</span> All is A-OK
      /// 
      /// UIColor(red: 0.714088082313538, green: 1.0, blue: 0.668711006641388, alpha: 1.0)
      static inline  UIColor *allIsAOK() {
          return [UIColor colorWithRed:0.714088082313538 green:1.0 blue:0.668711006641388 alpha:1.0];
      }
      
      /// <span style='background-color: #FF8A7E; color: #007581; padding: 1px 3px;'>#FF8A7E</span> Severe error
      /// 
      /// UIColor(red: 1.0, green: 0.542837381362915, blue: 0.492646008729935, alpha: 1.0)
      static inline  UIColor *severeError() {
          return [UIColor colorWithRed:1.0 green:0.542837381362915 blue:0.492646008729935 alpha:1.0];
      }
      
      /// <span style='background-color: #FFEBA2; color: #00145D; padding: 1px 3px;'>#FFEBA2</span> Warning
      /// 
      /// UIColor(red: 1.0, green: 0.921021163463593, blue: 0.63618391752243, alpha: 1.0)
      static inline  UIColor *warning() {
          return [UIColor colorWithRed:1.0 green:0.921021163463593 blue:0.63618391752243 alpha:1.0];
      }
      
      /// <span style='background-color: #FFFCF9; color: #000306; padding: 1px 3px;'>#FFFCF9</span> Slightly off-white
      /// 
      /// UIColor(red: 1.0, green: 0.988235294818878, blue: 0.976470589637756, alpha: 1.0)
      static inline  UIColor *slightlyOffWhite() {
          return [UIColor colorWithRed:1.0 green:0.988235294818878 blue:0.976470589637756 alpha:1.0];
      }
    
  
  
  /// This `R.font` struct is generated, and contains static references to 5 fonts.
  
    /// Font `AveriaLibre-BoldItalic`.
     #define averiaLibreBoldItalic  @"AveriaLibre-BoldItalic"
    /// Font `AveriaLibre-Bold`.
     #define averiaLibreBold  @"AveriaLibre-Bold"
    /// Font `AveriaLibre-Light`.
     #define averiaLibreLight  @"AveriaLibre-Light"
    /// Font `AveriaLibre-Regular`.
     #define averiaLibreRegular  @"AveriaLibre-Regular"
    /// Font `GoudyBookletter1911`.
     #define goudyBookletter1911  @"GoudyBookletter1911"
    
    /// `UIFont(name: "AveriaLibre-Bold", size: ...)`
    static inline  UIFont *averiaLibreBold() {
        return [UIFont fontWithName:@"AveriaLibre-Bold" size:size];
    }
    
    /// `UIFont(name: "AveriaLibre-BoldItalic", size: ...)`
    static inline  UIFont *averiaLibreBoldItalic() {
        return [UIFont fontWithName:@"AveriaLibre-BoldItalic" size:size];
    }
    
    /// `UIFont(name: "AveriaLibre-Light", size: ...)`
    static inline  UIFont *averiaLibreLight() {
        return [UIFont fontWithName:@"AveriaLibre-Light" size:size];
    }
    
    /// `UIFont(name: "AveriaLibre-Regular", size: ...)`
    static inline  UIFont *averiaLibreRegular() {
        return [UIFont fontWithName:@"AveriaLibre-Regular" size:size];
    }
    
    /// `UIFont(name: "GoudyBookletter1911", size: ...)`
    static inline  UIFont *goudyBookletter1911() {
        return [UIFont fontWithName:@"GoudyBookletter1911" size:size];
    }
  
  
  /// This `R.image` struct is generated, and contains static references to 6 images.
  
    /// Image `Colors.jpg`.
     #define colorsJpg  @"Colors.jpg"
    /// Image `User@white`.
     #define userWhite  @"User@white"
    /// Image `eerste`.
     #define eerste  @"eerste"
    /// Image `first nested`.
     #define firstNested  @"first nested"
    /// Image `first`.
     #define first  @"first"
    /// Image `second nested`.
     #define secondNested  @"second nested"
    
    /// `UIImage(named: "Colors.jpg", bundle: ..., traitCollection: ...)`
    static inline  UIImage *colorsJpg( UITraitCollection *traitCollection) {
        return [UIImage imageNamed:@"Colors.jpg" inBundle:nil compatibleWithTraitCollection:traitCollection];
    }
    
    /// `UIImage(named: "User@white", bundle: ..., traitCollection: ...)`
    static inline  UIImage *userWhite( UITraitCollection *traitCollection) {
        return [UIImage imageNamed:@"User@white" inBundle:nil compatibleWithTraitCollection:traitCollection];
    }
    
    /// `UIImage(named: "eerste", bundle: ..., traitCollection: ...)`
    static inline  UIImage *eerste( UITraitCollection *traitCollection) {
        return [UIImage imageNamed:@"eerste" inBundle:nil compatibleWithTraitCollection:traitCollection];
    }
    
    /// `UIImage(named: "first nested", bundle: ..., traitCollection: ...)`
    static inline  UIImage *firstNested( UITraitCollection *traitCollection) {
        return [UIImage imageNamed:@"first nested" inBundle:nil compatibleWithTraitCollection:traitCollection];
    }
    
    /// `UIImage(named: "first", bundle: ..., traitCollection: ...)`
    static inline  UIImage *first( UITraitCollection *traitCollection) {
        return [UIImage imageNamed:@"first" inBundle:nil compatibleWithTraitCollection:traitCollection];
    }
    
    /// `UIImage(named: "second nested", bundle: ..., traitCollection: ...)`
    static inline  UIImage *secondNested( UITraitCollection *traitCollection) {
        return [UIImage imageNamed:@"second nested" inBundle:nil compatibleWithTraitCollection:traitCollection];
    }
  
  
  /// This `R.string` struct is generated, and contains static references to 3 localization tables.
  
    /// This `R.string.generic` struct is generated, and contains static references to 9 localization keys.
    
      /// Value: Lorem ipsum dolor sit amet, consectetur adipiscing elit.
       #define loremipsum  @"loremipsum"
      /// Value: Pre Alpha (| %#@first@ |)
       #define correctAlpha  @"correct alpha"
      /// Value: Pre Beta (| %#@first@ x %#@second@ |)
       #define correctBeta  @"correct beta"
      /// Value: Pre Delta (| %#@first@ |)
       #define correctDelta  @"correct delta"
      /// Value: Pre Epsilon (| %#@first@ |)
       #define correctEpsilon  @"correct epsilon"
      /// Value: Pre Eta (| %@ - %#@second@ - %d|)
       #define correctEta  @"correct eta"
      /// Value: Pre Gamma (| %2$#@second@ x %1$#@first@ |)
       #define correctGamma  @"correct gamma"
      /// Value: Pre Theta (| %#@first@ |)
       #define correctTheta  @"correct theta"
      /// Value: Pre Zeta (| %@ %2$#@second@ |)
       #define correctZeta  @"correct zeta"
      
      /// Value: Lorem ipsum dolor sit amet, consectetur adipiscing elit.
      static inline  NSString *loremipsum() {
          return NSLocalizedStringFromTable(@"loremipsum", nil, @"Generic");
      }
      
      /// Value: Pre Alpha (| %#@first@ |)
      static inline  NSString *correctAlpha( int value1) {
          return [NSString localizedStringWithFormat:NSLocalizedStringFromTable(@"correct alpha", nil, @"Generic"),value1];
      }
      
      /// Value: Pre Beta (| %#@first@ x %#@second@ |)
      static inline  NSString *correctBeta( int value1,  int value2) {
          return [NSString localizedStringWithFormat:NSLocalizedStringFromTable(@"correct beta", nil, @"Generic"),value1, value2];
      }
      
      /// Value: Pre Delta (| %#@first@ |)
      static inline  NSString *correctDelta( int value1,  int value2) {
          return [NSString localizedStringWithFormat:NSLocalizedStringFromTable(@"correct delta", nil, @"Generic"),value1, value2];
      }
      
      /// Value: Pre Epsilon (| %#@first@ |)
      static inline  NSString *correctEpsilon( int value1,  int value2) {
          return [NSString localizedStringWithFormat:NSLocalizedStringFromTable(@"correct epsilon", nil, @"Generic"),value1, value2];
      }
      
      /// Value: Pre Eta (| %@ - %#@second@ - %d|)
      static inline  NSString *correctEta( NSString *value1,  int value2,  int value3) {
          return [NSString localizedStringWithFormat:NSLocalizedStringFromTable(@"correct eta", nil, @"Generic"),value1, value2, value3];
      }
      
      /// Value: Pre Gamma (| %2$#@second@ x %1$#@first@ |)
      static inline  NSString *correctGamma( int value1,  int value2) {
          return [NSString localizedStringWithFormat:NSLocalizedStringFromTable(@"correct gamma", nil, @"Generic"),value1, value2];
      }
      
      /// Value: Pre Theta (| %#@first@ |)
      static inline  NSString *correctTheta( int value1,  int value2,  int value3) {
          return [NSString localizedStringWithFormat:NSLocalizedStringFromTable(@"correct theta", nil, @"Generic"),value1, value2, value3];
      }
      
      /// Value: Pre Zeta (| %@ %2$#@second@ |)
      static inline  NSString *correctZeta( NSString *value1,  int value2) {
          return [NSString localizedStringWithFormat:NSLocalizedStringFromTable(@"correct zeta", nil, @"Generic"),value1, value2];
      }
    
    
    /// This `R.string.localizable` struct is generated, and contains static references to 4 localization keys.
    
      /// en translation: 2
      /// 
      /// Locales: en, es, ja
       #define two  @"two"
      /// en translation: One
      /// 
      /// Locales: en, es, ja
       #define one  @"one"
      /// en translation: There are %d lights!
      /// 
      /// Locales: en, es, ja
       #define quote  @"quote"
      /// ja translation: Not translated in other languages, and there is no Base
      /// 
      /// Locales: ja
       #define japaneseOnly  @"japanese only"
      
      /// en translation: 2
      /// 
      /// Locales: en, es, ja
      static inline  NSString *two() {
          return NSLocalizedString(@"two", @"");
      }
      
      /// en translation: One
      /// 
      /// Locales: en, es, ja
      static inline  NSString *one() {
          return NSLocalizedString(@"one", @"");
      }
      
      /// en translation: There are %d lights!
      /// 
      /// Locales: en, es, ja
      static inline  NSString *quote( int value1) {
          return [NSString localizedStringWithFormat:NSLocalizedString(@"quote", @""),value1];
      }
      
      /// ja translation: Not translated in other languages, and there is no Base
      /// 
      /// Locales: ja
      static inline  NSString *japaneseOnly() {
          return NSLocalizedString(@"japanese only", @"");
      }
    
    
    /// This `R.string.settings` struct is generated, and contains static references to 10 localization keys.
    
      /// Base translation: %1$#@lu_completed_runs@
      /// 
      /// Locales: Base, nl
       #define scopeLuOutOfLuRuns  @"scope.%lu out of %lu runs"
      /// Base translation: %1$d of %2$i files copied, %3$f.2%% completed.
      /// 
      /// Locales: Base, nl
       #define copyProgress  @"Copy.Progress"
      /// Base translation: ABC "\DEF/" GHI Base
      /// 
      /// Locales: Base, nl
       #define multilineKeyWeird  @"Multiline\t\\key/\n\"weird\"?!"
      /// Base translation: Base %#@first@
      /// 
      /// Locales: Base
       #define incorrectInDutch  @"incorrect in dutch"
      /// Base translation: Base language; Not translated
      /// 
      /// Locales: Base
       #define notTranslated  @"Not translated"
      /// Base translation: Nothing
      /// 
      /// Locales: Base, nl
       #define formatSpecifiers3  @"FormatSpecifiers3"
      /// Base translation: Settings
      /// 
      /// Locales: Base, nl
       #define title  @"Title"
      /// Base translation: We need a couple things before you get started.
      /// 
      /// Locales: Base, nl
       #define weNeedACoupleThingsBeforeYouGetStarted  @"We need a couple things\r\nbefore you get started."
      /// Base translation: number 1: %1$d
      /// 
      /// Locales: Base, nl
       #define formatSpecifiers4  @"FormatSpecifiers4"
      /// Base translation: number 1: %d, number 2: %i, string 3: %@
      /// 
      /// Locales: Base, nl
       #define formatSpecifiers1  @"FormatSpecifiers1"
      
      /// Base translation: %1$#@lu_completed_runs@
      /// 
      /// Locales: Base, nl
      static inline  NSString *scopeLuOutOfLuRuns( uint value1,  uint value2) {
          return [NSString localizedStringWithFormat:NSLocalizedStringFromTable(@"scope.%lu out of %lu runs", nil, @"Settings"),value1, value2];
      }
      
      /// Base translation: %1$d of %2$i files copied, %3$f.2%% completed.
      /// 
      /// Locales: Base, nl
      static inline  NSString *copyProgress( int value1,  int value2,  double value3) {
          return [NSString localizedStringWithFormat:NSLocalizedStringFromTable(@"Copy.Progress", nil, @"Settings"),value1, value2, value3];
      }
      
      /// Base translation: ABC "\DEF/" GHI Base
      /// 
      /// Locales: Base, nl
      static inline  NSString *multilineKeyWeird() {
          return NSLocalizedStringFromTable(@"Multiline\t\\key/\n\"weird\"?!", nil, @"Settings");
      }
      
      /// Base translation: Base %#@first@
      /// 
      /// Locales: Base
      static inline  NSString *incorrectInDutch( int value1) {
          return [NSString localizedStringWithFormat:NSLocalizedStringFromTable(@"incorrect in dutch", nil, @"Settings"),value1];
      }
      
      /// Base translation: Base language; Not translated
      /// 
      /// Locales: Base
      static inline  NSString *notTranslated() {
          return NSLocalizedStringFromTable(@"Not translated", nil, @"Settings");
      }
      
      /// Base translation: Nothing
      /// 
      /// Locales: Base, nl
      static inline  NSString *formatSpecifiers3( int value1,  int value2,  NSString *value3) {
          return [NSString localizedStringWithFormat:NSLocalizedStringFromTable(@"FormatSpecifiers3", nil, @"Settings"),value1, value2, value3];
      }
      
      /// Base translation: Settings
      /// 
      /// Locales: Base, nl
      static inline  NSString *title() {
          return NSLocalizedStringFromTable(@"Title", nil, @"Settings");
      }
      
      /// Base translation: We need a couple things before you get started.
      /// 
      /// Locales: Base, nl
      static inline  NSString *weNeedACoupleThingsBeforeYouGetStarted() {
          return NSLocalizedStringFromTable(@"We need a couple things\r\nbefore you get started.", nil, @"Settings");
      }
      
      /// Base translation: number 1: %1$d
      /// 
      /// Locales: Base, nl
      static inline  NSString *formatSpecifiers4( int value1,  int value2,  NSString *value3) {
          return [NSString localizedStringWithFormat:NSLocalizedStringFromTable(@"FormatSpecifiers4", nil, @"Settings"),value1, value2, value3];
      }
      
      /// Base translation: number 1: %d, number 2: %i, string 3: %@
      /// 
      /// Locales: Base, nl
      static inline  NSString *formatSpecifiers1( int value1,  int value2,  NSString *value3) {
          return [NSString localizedStringWithFormat:NSLocalizedStringFromTable(@"FormatSpecifiers1", nil, @"Settings"),value1, value2, value3];
      }
    
  



  

