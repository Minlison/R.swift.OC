//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import AVKit
import Foundation
import GLKit
import Rswift
import SWRevealViewController
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try font.validate()
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 2 color palettes.
  struct color {
    /// This `R.color.myRSwiftColors` struct is generated, and contains static references to 5 colors.
    struct myRSwiftColors {
      /// <span style='background-color: #6A6A6A4C; color: #959595; padding: 1px 3px;'>#6A6A6A4C</span> See-through gray
      static let seeThroughGray = Rswift.ColorResource(name: "See-through gray", red: 0.417588144540787, green: 0.417588144540787, blue: 0.417588144540787, alpha: 0.298275858163834)
      /// <span style='background-color: #B6FFAB; color: #490054; padding: 1px 3px;'>#B6FFAB</span> All is A-OK
      static let allIsAOK = Rswift.ColorResource(name: "All is A-OK", red: 0.714088082313538, green: 1.0, blue: 0.668711006641388, alpha: 1.0)
      /// <span style='background-color: #FF8A7E; color: #007581; padding: 1px 3px;'>#FF8A7E</span> Severe error
      static let severeError = Rswift.ColorResource(name: "Severe error", red: 1.0, green: 0.542837381362915, blue: 0.492646008729935, alpha: 1.0)
      /// <span style='background-color: #FFEBA2; color: #00145D; padding: 1px 3px;'>#FFEBA2</span> Warning
      static let warning = Rswift.ColorResource(name: "Warning", red: 1.0, green: 0.921021163463593, blue: 0.63618391752243, alpha: 1.0)
      /// <span style='background-color: #FFFCF9; color: #000306; padding: 1px 3px;'>#FFFCF9</span> Slightly off-white
      static let slightlyOffWhite = Rswift.ColorResource(name: "Slightly off-white", red: 1.0, green: 0.988235294818878, blue: 0.976470589637756, alpha: 1.0)
      
      /// <span style='background-color: #6A6A6A4C; color: #959595; padding: 1px 3px;'>#6A6A6A4C</span> See-through gray
      /// 
      /// UIColor(red: 0.417588144540787, green: 0.417588144540787, blue: 0.417588144540787, alpha: 0.298275858163834)
      static func seeThroughGray(_: Void = ()) -> UIKit.UIColor {
        return UIKit.UIColor(red: 0.417588144540787, green: 0.417588144540787, blue: 0.417588144540787, alpha: 0.298275858163834)
      }
      
      /// <span style='background-color: #B6FFAB; color: #490054; padding: 1px 3px;'>#B6FFAB</span> All is A-OK
      /// 
      /// UIColor(red: 0.714088082313538, green: 1.0, blue: 0.668711006641388, alpha: 1.0)
      static func allIsAOK(_: Void = ()) -> UIKit.UIColor {
        return UIKit.UIColor(red: 0.714088082313538, green: 1.0, blue: 0.668711006641388, alpha: 1.0)
      }
      
      /// <span style='background-color: #FF8A7E; color: #007581; padding: 1px 3px;'>#FF8A7E</span> Severe error
      /// 
      /// UIColor(red: 1.0, green: 0.542837381362915, blue: 0.492646008729935, alpha: 1.0)
      static func severeError(_: Void = ()) -> UIKit.UIColor {
        return UIKit.UIColor(red: 1.0, green: 0.542837381362915, blue: 0.492646008729935, alpha: 1.0)
      }
      
      /// <span style='background-color: #FFEBA2; color: #00145D; padding: 1px 3px;'>#FFEBA2</span> Warning
      /// 
      /// UIColor(red: 1.0, green: 0.921021163463593, blue: 0.63618391752243, alpha: 1.0)
      static func warning(_: Void = ()) -> UIKit.UIColor {
        return UIKit.UIColor(red: 1.0, green: 0.921021163463593, blue: 0.63618391752243, alpha: 1.0)
      }
      
      /// <span style='background-color: #FFFCF9; color: #000306; padding: 1px 3px;'>#FFFCF9</span> Slightly off-white
      /// 
      /// UIColor(red: 1.0, green: 0.988235294818878, blue: 0.976470589637756, alpha: 1.0)
      static func slightlyOffWhite(_: Void = ()) -> UIKit.UIColor {
        return UIKit.UIColor(red: 1.0, green: 0.988235294818878, blue: 0.976470589637756, alpha: 1.0)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 21 files.
  struct file {
    /// Resource file `#column`.
    static let column = Rswift.FileResource(bundle: R.hostingBundle, name: "#column", pathExtension: "")
    /// Resource file `AveriaLibre-B.ttf`.
    static let averiaLibreBTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "AveriaLibre-B", pathExtension: "ttf")
    /// Resource file `AveriaLibre-BI.ttf`.
    static let averiaLibreBITtf = Rswift.FileResource(bundle: R.hostingBundle, name: "AveriaLibre-BI", pathExtension: "ttf")
    /// Resource file `AveriaLibre-L.ttf`.
    static let averiaLibreLTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "AveriaLibre-L", pathExtension: "ttf")
    /// Resource file `AveriaLibre.ttf`.
    static let averiaLibreTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "AveriaLibre", pathExtension: "ttf")
    /// Resource file `Colors.jpg`.
    static let colorsJpg = Rswift.FileResource(bundle: R.hostingBundle, name: "Colors", pathExtension: "jpg")
    /// Resource file `Colors@2x.jpg`.
    static let colors2xJpg = Rswift.FileResource(bundle: R.hostingBundle, name: "Colors@2x", pathExtension: "jpg")
    /// Resource file `Colors@3x.jpg`.
    static let colors3xJpg = Rswift.FileResource(bundle: R.hostingBundle, name: "Colors@3x", pathExtension: "jpg")
    /// Resource file `Colors~ipad@2x.jpg`.
    static let colorsIpad2xJpg = Rswift.FileResource(bundle: R.hostingBundle, name: "Colors~ipad@2x", pathExtension: "jpg")
    /// Resource file `Display P3.clr`.
    static let displayP3Clr = Rswift.FileResource(bundle: R.hostingBundle, name: "Display P3", pathExtension: "clr")
    /// Resource file `GdyBkltter1911.ttf`.
    static let gdyBkltter1911Ttf = Rswift.FileResource(bundle: R.hostingBundle, name: "GdyBkltter1911", pathExtension: "ttf")
    /// Resource file `My R.swift colors.clr`.
    static let myRSwiftColorsClr = Rswift.FileResource(bundle: R.hostingBundle, name: "My R.swift colors", pathExtension: "clr")
    /// Resource file `Settings.bundle`.
    static let settingsBundle = Rswift.FileResource(bundle: R.hostingBundle, name: "Settings", pathExtension: "bundle")
    /// Resource file `Some.json`.
    static let someJson = Rswift.FileResource(bundle: R.hostingBundle, name: "Some", pathExtension: "json")
    /// Resource file `The App Icon.png`.
    static let theAppIconPng = Rswift.FileResource(bundle: R.hostingBundle, name: "The App Icon", pathExtension: "png")
    /// Resource file `User@white.png`.
    static let userWhitePng = Rswift.FileResource(bundle: R.hostingBundle, name: "User@white", pathExtension: "png")
    /// Resource file `User@white@2x.png`.
    static let userWhite2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "User@white@2x", pathExtension: "png")
    /// Resource file `User@white@3x.png`.
    static let userWhite3xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "User@white@3x", pathExtension: "png")
    /// Resource file `__FILE__`.
    static let `__FILE__` = Rswift.FileResource(bundle: R.hostingBundle, name: "__FILE__", pathExtension: "")
    /// Resource file `associatedtype`.
    static let `associatedtype` = Rswift.FileResource(bundle: R.hostingBundle, name: "associatedtype", pathExtension: "")
    /// Resource file `hello.txt`.
    static let helloTxt = Rswift.FileResource(bundle: R.hostingBundle, name: "hello", pathExtension: "txt")
    
    /// `bundle.url(forResource: "#column", withExtension: "")`
    static func column(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.column
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "AveriaLibre", withExtension: "ttf")`
    static func averiaLibreTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.averiaLibreTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "AveriaLibre-B", withExtension: "ttf")`
    static func averiaLibreBTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.averiaLibreBTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "AveriaLibre-BI", withExtension: "ttf")`
    static func averiaLibreBITtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.averiaLibreBITtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "AveriaLibre-L", withExtension: "ttf")`
    static func averiaLibreLTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.averiaLibreLTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Colors", withExtension: "jpg")`
    static func colorsJpg(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.colorsJpg
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Colors@2x", withExtension: "jpg")`
    static func colors2xJpg(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.colors2xJpg
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Colors@3x", withExtension: "jpg")`
    static func colors3xJpg(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.colors3xJpg
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Colors~ipad@2x", withExtension: "jpg")`
    static func colorsIpad2xJpg(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.colorsIpad2xJpg
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Display P3", withExtension: "clr")`
    static func displayP3Clr(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.displayP3Clr
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "GdyBkltter1911", withExtension: "ttf")`
    static func gdyBkltter1911Ttf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gdyBkltter1911Ttf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "My R.swift colors", withExtension: "clr")`
    static func myRSwiftColorsClr(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.myRSwiftColorsClr
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Settings", withExtension: "bundle")`
    static func settingsBundle(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.settingsBundle
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Some", withExtension: "json")`
    static func someJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.someJson
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "The App Icon", withExtension: "png")`
    static func theAppIconPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.theAppIconPng
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "User@white", withExtension: "png")`
    static func userWhitePng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.userWhitePng
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "User@white@2x", withExtension: "png")`
    static func userWhite2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.userWhite2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "User@white@3x", withExtension: "png")`
    static func userWhite3xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.userWhite3xPng
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "__FILE__", withExtension: "")`
    static func `__FILE__`(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.`__FILE__`
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "associatedtype", withExtension: "")`
    static func `associatedtype`(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.`associatedtype`
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "hello", withExtension: "txt")`
    static func helloTxt(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.helloTxt
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 5 fonts.
  struct font: Rswift.Validatable {
    /// Font `AveriaLibre-BoldItalic`.
    static let averiaLibreBoldItalic = Rswift.FontResource(fontName: "AveriaLibre-BoldItalic")
    /// Font `AveriaLibre-Bold`.
    static let averiaLibreBold = Rswift.FontResource(fontName: "AveriaLibre-Bold")
    /// Font `AveriaLibre-Light`.
    static let averiaLibreLight = Rswift.FontResource(fontName: "AveriaLibre-Light")
    /// Font `AveriaLibre-Regular`.
    static let averiaLibreRegular = Rswift.FontResource(fontName: "AveriaLibre-Regular")
    /// Font `GoudyBookletter1911`.
    static let goudyBookletter1911 = Rswift.FontResource(fontName: "GoudyBookletter1911")
    
    /// `UIFont(name: "AveriaLibre-Bold", size: ...)`
    static func averiaLibreBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: averiaLibreBold, size: size)
    }
    
    /// `UIFont(name: "AveriaLibre-BoldItalic", size: ...)`
    static func averiaLibreBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: averiaLibreBoldItalic, size: size)
    }
    
    /// `UIFont(name: "AveriaLibre-Light", size: ...)`
    static func averiaLibreLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: averiaLibreLight, size: size)
    }
    
    /// `UIFont(name: "AveriaLibre-Regular", size: ...)`
    static func averiaLibreRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: averiaLibreRegular, size: size)
    }
    
    /// `UIFont(name: "GoudyBookletter1911", size: ...)`
    static func goudyBookletter1911(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: goudyBookletter1911, size: size)
    }
    
    static func validate() throws {
      if R.font.averiaLibreBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'AveriaLibre-BoldItalic' could not be loaded, is 'AveriaLibre-BI.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.averiaLibreRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'AveriaLibre-Regular' could not be loaded, is 'AveriaLibre.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.averiaLibreLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'AveriaLibre-Light' could not be loaded, is 'AveriaLibre-L.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.goudyBookletter1911(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'GoudyBookletter1911' could not be loaded, is 'GdyBkltter1911.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.averiaLibreBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'AveriaLibre-Bold' could not be loaded, is 'AveriaLibre-B.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 6 images.
  struct image {
    /// Image `Colors.jpg`.
    static let colorsJpg = Rswift.ImageResource(bundle: R.hostingBundle, name: "Colors.jpg")
    /// Image `User@white`.
    static let userWhite = Rswift.ImageResource(bundle: R.hostingBundle, name: "User@white")
    /// Image `eerste`.
    static let eerste = Rswift.ImageResource(bundle: R.hostingBundle, name: "eerste")
    /// Image `first nested`.
    static let firstNested = Rswift.ImageResource(bundle: R.hostingBundle, name: "first nested")
    /// Image `first`.
    static let first = Rswift.ImageResource(bundle: R.hostingBundle, name: "first")
    /// Image `second nested`.
    static let secondNested = Rswift.ImageResource(bundle: R.hostingBundle, name: "second nested")
    
    /// `UIImage(named: "Colors.jpg", bundle: ..., traitCollection: ...)`
    static func colorsJpg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.colorsJpg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "User@white", bundle: ..., traitCollection: ...)`
    static func userWhite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.userWhite, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "eerste", bundle: ..., traitCollection: ...)`
    static func eerste(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.eerste, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "first nested", bundle: ..., traitCollection: ...)`
    static func firstNested(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.firstNested, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "first", bundle: ..., traitCollection: ...)`
    static func first(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.first, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "second nested", bundle: ..., traitCollection: ...)`
    static func secondNested(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.secondNested, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 10 nibs.
  struct nib {
    /// Nib `ADuplicateCellView`.
    static let aDuplicateCellView = _R.nib._ADuplicateCellView()
    /// Nib `CellCollectionView`.
    static let cellCollectionView = _R.nib._CellCollectionView()
    /// Nib `CellView`.
    static let cellView = _R.nib._CellView()
    /// Nib `DuplicateCellView`.
    static let duplicateCellView = _R.nib._DuplicateCellView()
    /// Nib `LaunchScreen`.
    static let launchScreen = _R.nib._LaunchScreen()
    /// Nib `My View`.
    static let myView = _R.nib._MyView()
    /// Nib `RelativeToProject`.
    static let relativeToProject = _R.nib._RelativeToProject()
    /// Nib `SupplementaryElement`.
    static let supplementaryElement = _R.nib._SupplementaryElement()
    /// Nib `WhitespaceReuseIdentifer`.
    static let whitespaceReuseIdentifer = _R.nib._WhitespaceReuseIdentifer()
    /// Nib `Xib with ViewController`.
    static let xibWithViewController = _R.nib._XibWithViewController()
    
    /// `UINib(name: "ADuplicateCellView", in: bundle)`
    static func aDuplicateCellView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.aDuplicateCellView)
    }
    
    /// `UINib(name: "CellCollectionView", in: bundle)`
    static func cellCollectionView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.cellCollectionView)
    }
    
    /// `UINib(name: "CellView", in: bundle)`
    static func cellView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.cellView)
    }
    
    /// `UINib(name: "DuplicateCellView", in: bundle)`
    static func duplicateCellView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.duplicateCellView)
    }
    
    /// `UINib(name: "LaunchScreen", in: bundle)`
    static func launchScreen(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.launchScreen)
    }
    
    /// `UINib(name: "My View", in: bundle)`
    static func myView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.myView)
    }
    
    /// `UINib(name: "RelativeToProject", in: bundle)`
    static func relativeToProject(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.relativeToProject)
    }
    
    /// `UINib(name: "SupplementaryElement", in: bundle)`
    static func supplementaryElement(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.supplementaryElement)
    }
    
    /// `UINib(name: "WhitespaceReuseIdentifer", in: bundle)`
    static func whitespaceReuseIdentifer(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.whitespaceReuseIdentifer)
    }
    
    /// `UINib(name: "Xib with ViewController", in: bundle)`
    static func xibWithViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.xibWithViewController)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 5 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `SomeReusableCell`.
    static let someReusableCell: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "SomeReusableCell")
    /// Reuse identifier `SupplementaryElement`.
    static let supplementaryElement: Rswift.ReuseIdentifier<UIKit.UICollectionReusableView> = Rswift.ReuseIdentifier(identifier: "SupplementaryElement")
    /// Reuse identifier `emptyCell`.
    static let emptyCell: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "emptyCell")
    /// Reuse identifier `fullCell`.
    static let fullCell: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "fullCell")
    /// Reuse identifier `myCollectionViewCell`.
    static let myCollectionViewCell: Rswift.ReuseIdentifier<UIKit.UICollectionViewCell> = Rswift.ReuseIdentifier(identifier: "myCollectionViewCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 3 view controllers.
  struct segue {
    /// This struct is generated for `FirstViewController`, and contains static references to 3 segues.
    struct firstViewController {
      /// Segue identifier `toAVPlayerController`.
      static let toAVPlayerController: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, FirstViewController, AVKit.AVPlayerViewController> = Rswift.StoryboardSegueIdentifier(identifier: "toAVPlayerController")
      /// Segue identifier `toMain`.
      static let toMain: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, FirstViewController, UIKit.UITabBarController> = Rswift.StoryboardSegueIdentifier(identifier: "toMain")
      /// Segue identifier `toSomeStoryboard`.
      static let toSomeStoryboard: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, FirstViewController, UIKit.UIViewController> = Rswift.StoryboardSegueIdentifier(identifier: "toSomeStoryboard")
      
      /// Optionally returns a typed version of segue `toAVPlayerController`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func toAVPlayerController(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, FirstViewController, AVKit.AVPlayerViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.firstViewController.toAVPlayerController, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `toMain`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func toMain(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, FirstViewController, UIKit.UITabBarController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.firstViewController.toMain, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `toSomeStoryboard`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func toSomeStoryboard(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, FirstViewController, UIKit.UIViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.firstViewController.toSomeStoryboard, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `SecondViewController`, and contains static references to 3 segues.
    struct secondViewController {
      /// Segue identifier `attachedSegue`.
      static let attachedSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SecondViewController, UIKit.UIViewController> = Rswift.StoryboardSegueIdentifier(identifier: "attachedSegue")
      /// Segue identifier `recognizerSegue`.
      static let recognizerSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SecondViewController, UIKit.UIViewController> = Rswift.StoryboardSegueIdentifier(identifier: "recognizerSegue")
      /// Segue identifier `toThird`.
      static let toThird: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SecondViewController, UIKit.UIViewController> = Rswift.StoryboardSegueIdentifier(identifier: "toThird")
      
      /// Optionally returns a typed version of segue `attachedSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func attachedSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SecondViewController, UIKit.UIViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.secondViewController.attachedSegue, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `recognizerSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func recognizerSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SecondViewController, UIKit.UIViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.secondViewController.recognizerSegue, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `toThird`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func toThird(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SecondViewController, UIKit.UIViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.secondViewController.toThird, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `UIViewController`, and contains static references to 1 segues.
    struct uIKitUIViewController {
      /// Segue identifier `unwindSegue`.
      static let unwindSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, UIKit.UIViewController, UIKit.UIViewController> = Rswift.StoryboardSegueIdentifier(identifier: "unwindSegue")
      
      /// Optionally returns a typed version of segue `unwindSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func unwindSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, UIKit.UIViewController, UIKit.UIViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.uIKitUIViewController.unwindSegue, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 4 storyboards.
  struct storyboard {
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `References`.
    static let references = _R.storyboard.references()
    /// Storyboard `Secondary`.
    static let secondary = _R.storyboard.secondary()
    /// Storyboard `Specials`.
    static let specials = _R.storyboard.specials()
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    /// `UIStoryboard(name: "References", bundle: ...)`
    static func references(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.references)
    }
    
    /// `UIStoryboard(name: "Secondary", bundle: ...)`
    static func secondary(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.secondary)
    }
    
    /// `UIStoryboard(name: "Specials", bundle: ...)`
    static func specials(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.specials)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 3 localization tables.
  struct string {
    /// This `R.string.generic` struct is generated, and contains static references to 9 localization keys.
    struct generic {
      /// Value: Lorem ipsum dolor sit amet, consectetur adipiscing elit.
      static let loremipsum = Rswift.StringResource(key: "loremipsum", tableName: "Generic", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Pre Alpha (| %#@first@ |)
      static let correctAlpha = Rswift.StringResource(key: "correct alpha", tableName: "Generic", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Pre Beta (| %#@first@ x %#@second@ |)
      static let correctBeta = Rswift.StringResource(key: "correct beta", tableName: "Generic", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Pre Delta (| %#@first@ |)
      static let correctDelta = Rswift.StringResource(key: "correct delta", tableName: "Generic", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Pre Epsilon (| %#@first@ |)
      static let correctEpsilon = Rswift.StringResource(key: "correct epsilon", tableName: "Generic", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Pre Eta (| %@ - %#@second@ - %d|)
      static let correctEta = Rswift.StringResource(key: "correct eta", tableName: "Generic", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Pre Gamma (| %2$#@second@ x %1$#@first@ |)
      static let correctGamma = Rswift.StringResource(key: "correct gamma", tableName: "Generic", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Pre Theta (| %#@first@ |)
      static let correctTheta = Rswift.StringResource(key: "correct theta", tableName: "Generic", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Pre Zeta (| %@ %2$#@second@ |)
      static let correctZeta = Rswift.StringResource(key: "correct zeta", tableName: "Generic", bundle: R.hostingBundle, locales: [], comment: nil)
      
      /// Value: Lorem ipsum dolor sit amet, consectetur adipiscing elit.
      static func loremipsum(_: Void = ()) -> String {
        return NSLocalizedString("loremipsum", tableName: "Generic", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Pre Alpha (| %#@first@ |)
      static func correctAlpha(first value1: Int) -> String {
        return String(format: NSLocalizedString("correct alpha", tableName: "Generic", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Value: Pre Beta (| %#@first@ x %#@second@ |)
      static func correctBeta(first value1: Int, second value2: Int) -> String {
        return String(format: NSLocalizedString("correct beta", tableName: "Generic", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1, value2)
      }
      
      /// Value: Pre Delta (| %#@first@ |)
      static func correctDelta(first value1: Int, second value2: Int) -> String {
        return String(format: NSLocalizedString("correct delta", tableName: "Generic", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1, value2)
      }
      
      /// Value: Pre Epsilon (| %#@first@ |)
      static func correctEpsilon(first value1: Int, second value2: Int) -> String {
        return String(format: NSLocalizedString("correct epsilon", tableName: "Generic", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1, value2)
      }
      
      /// Value: Pre Eta (| %@ - %#@second@ - %d|)
      static func correctEta(_ value1: String, second value2: Int, _ value3: Int) -> String {
        return String(format: NSLocalizedString("correct eta", tableName: "Generic", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1, value2, value3)
      }
      
      /// Value: Pre Gamma (| %2$#@second@ x %1$#@first@ |)
      static func correctGamma(first value1: Int, second value2: Int) -> String {
        return String(format: NSLocalizedString("correct gamma", tableName: "Generic", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1, value2)
      }
      
      /// Value: Pre Theta (| %#@first@ |)
      static func correctTheta(first value1: Int, second value2: Int, third value3: Int) -> String {
        return String(format: NSLocalizedString("correct theta", tableName: "Generic", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1, value2, value3)
      }
      
      /// Value: Pre Zeta (| %@ %2$#@second@ |)
      static func correctZeta(_ value1: String, second value2: Int) -> String {
        return String(format: NSLocalizedString("correct zeta", tableName: "Generic", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1, value2)
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.localizable` struct is generated, and contains static references to 4 localization keys.
    struct localizable {
      /// en translation: 2
      /// 
      /// Locales: en, es, ja
      static let two = Rswift.StringResource(key: "two", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "ja"], comment: nil)
      /// en translation: One
      /// 
      /// Locales: en, es, ja
      static let one = Rswift.StringResource(key: "one", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "ja"], comment: nil)
      /// en translation: There are %d lights!
      /// 
      /// Locales: en, es, ja
      static let quote = Rswift.StringResource(key: "quote", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "es", "ja"], comment: nil)
      /// ja translation: Not translated in other languages, and there is no Base
      /// 
      /// Locales: ja
      static let japaneseOnly = Rswift.StringResource(key: "japanese only", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      
      /// en translation: 2
      /// 
      /// Locales: en, es, ja
      static func two(_: Void = ()) -> String {
        return NSLocalizedString("two", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: One
      /// 
      /// Locales: en, es, ja
      static func one(_: Void = ()) -> String {
        return NSLocalizedString("one", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: There are %d lights!
      /// 
      /// Locales: en, es, ja
      static func quote(_ value1: Int) -> String {
        return String(format: NSLocalizedString("quote", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// ja translation: Not translated in other languages, and there is no Base
      /// 
      /// Locales: ja
      static func japaneseOnly(_: Void = ()) -> String {
        return NSLocalizedString("japanese only", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.settings` struct is generated, and contains static references to 10 localization keys.
    struct settings {
      /// Base translation: %1$#@lu_completed_runs@
      /// 
      /// Locales: Base, nl
      static let scopeLuOutOfLuRuns = Rswift.StringResource(key: "scope.%lu out of %lu runs", tableName: "Settings", bundle: R.hostingBundle, locales: ["Base", "nl"], comment: nil)
      /// Base translation: %1$d of %2$i files copied, %3$f.2%% completed.
      /// 
      /// Locales: Base, nl
      static let copyProgress = Rswift.StringResource(key: "Copy.Progress", tableName: "Settings", bundle: R.hostingBundle, locales: ["Base", "nl"], comment: nil)
      /// Base translation: ABC "\DEF/" GHI Base
      /// 
      /// Locales: Base, nl
      static let multilineKeyWeird = Rswift.StringResource(key: "Multiline\t\\key/\n\"weird\"?!", tableName: "Settings", bundle: R.hostingBundle, locales: ["Base", "nl"], comment: nil)
      /// Base translation: Base %#@first@
      /// 
      /// Locales: Base
      static let incorrectInDutch = Rswift.StringResource(key: "incorrect in dutch", tableName: "Settings", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Base language; Not translated
      /// 
      /// Locales: Base
      static let notTranslated = Rswift.StringResource(key: "Not translated", tableName: "Settings", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Nothing
      /// 
      /// Locales: Base, nl
      static let formatSpecifiers3 = Rswift.StringResource(key: "FormatSpecifiers3", tableName: "Settings", bundle: R.hostingBundle, locales: ["Base", "nl"], comment: nil)
      /// Base translation: Settings
      /// 
      /// Locales: Base, nl
      static let title = Rswift.StringResource(key: "Title", tableName: "Settings", bundle: R.hostingBundle, locales: ["Base", "nl"], comment: nil)
      /// Base translation: We need a couple things before you get started.
      /// 
      /// Locales: Base, nl
      static let weNeedACoupleThingsBeforeYouGetStarted = Rswift.StringResource(key: "We need a couple things\r\nbefore you get started.", tableName: "Settings", bundle: R.hostingBundle, locales: ["Base", "nl"], comment: nil)
      /// Base translation: number 1: %1$d
      /// 
      /// Locales: Base, nl
      static let formatSpecifiers4 = Rswift.StringResource(key: "FormatSpecifiers4", tableName: "Settings", bundle: R.hostingBundle, locales: ["Base", "nl"], comment: nil)
      /// Base translation: number 1: %d, number 2: %i, string 3: %@
      /// 
      /// Locales: Base, nl
      static let formatSpecifiers1 = Rswift.StringResource(key: "FormatSpecifiers1", tableName: "Settings", bundle: R.hostingBundle, locales: ["Base", "nl"], comment: nil)
      
      /// Base translation: %1$#@lu_completed_runs@
      /// 
      /// Locales: Base, nl
      static func scopeLuOutOfLuRuns(lu_completed_runs value1: UInt, lu_total_runs value2: UInt) -> String {
        return String(format: NSLocalizedString("scope.%lu out of %lu runs", tableName: "Settings", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1, value2)
      }
      
      /// Base translation: %1$d of %2$i files copied, %3$f.2%% completed.
      /// 
      /// Locales: Base, nl
      static func copyProgress(_ value1: Int, _ value2: Int, _ value3: Double) -> String {
        return String(format: NSLocalizedString("Copy.Progress", tableName: "Settings", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1, value2, value3)
      }
      
      /// Base translation: ABC "\DEF/" GHI Base
      /// 
      /// Locales: Base, nl
      static func multilineKeyWeird(_: Void = ()) -> String {
        return NSLocalizedString("Multiline\t\\key/\n\"weird\"?!", tableName: "Settings", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Base %#@first@
      /// 
      /// Locales: Base
      static func incorrectInDutch(first value1: Int) -> String {
        return String(format: NSLocalizedString("incorrect in dutch", tableName: "Settings", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Base translation: Base language; Not translated
      /// 
      /// Locales: Base
      static func notTranslated(_: Void = ()) -> String {
        return NSLocalizedString("Not translated", tableName: "Settings", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Nothing
      /// 
      /// Locales: Base, nl
      static func formatSpecifiers3(_ value1: Int, _ value2: Int, _ value3: String) -> String {
        return String(format: NSLocalizedString("FormatSpecifiers3", tableName: "Settings", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1, value2, value3)
      }
      
      /// Base translation: Settings
      /// 
      /// Locales: Base, nl
      static func title(_: Void = ()) -> String {
        return NSLocalizedString("Title", tableName: "Settings", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: We need a couple things before you get started.
      /// 
      /// Locales: Base, nl
      static func weNeedACoupleThingsBeforeYouGetStarted(_: Void = ()) -> String {
        return NSLocalizedString("We need a couple things\r\nbefore you get started.", tableName: "Settings", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: number 1: %1$d
      /// 
      /// Locales: Base, nl
      static func formatSpecifiers4(_ value1: Int, _ value2: Int, _ value3: String) -> String {
        return String(format: NSLocalizedString("FormatSpecifiers4", tableName: "Settings", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1, value2, value3)
      }
      
      /// Base translation: number 1: %d, number 2: %i, string 3: %@
      /// 
      /// Locales: Base, nl
      static func formatSpecifiers1(_ value1: Int, _ value2: Int, _ value3: String) -> String {
        return String(format: NSLocalizedString("FormatSpecifiers1", tableName: "Settings", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1, value2, value3)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _MyView.validate()
    }
    
    struct _ADuplicateCellView: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = UIKit.UITableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "duplicateCellView"
      let name = "ADuplicateCellView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UITableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UITableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _CellCollectionView: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = UIKit.UICollectionViewCell
      
      let bundle = R.hostingBundle
      let identifier = "myCollectionViewCell"
      let name = "CellCollectionView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UICollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UICollectionViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _CellView: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = UIKit.UITableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "SomeReusableCell"
      let name = "CellView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UITableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UITableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _DuplicateCellView: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = UIKit.UITableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "DuplicateCellView"
      let name = "DuplicateCellView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UITableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UITableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _LaunchScreen: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _MyView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "My View"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "The App Icon.png", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'The App Icon.png' is used in nib 'My View', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _RelativeToProject: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "RelativeToProject"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _SupplementaryElement: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = UIKit.UICollectionReusableView
      
      let bundle = R.hostingBundle
      let identifier = "SupplementaryElement"
      let name = "SupplementaryElement"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UICollectionReusableView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UICollectionReusableView
      }
      
      fileprivate init() {}
    }
    
    struct _WhitespaceReuseIdentifer: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = UIKit.UITableViewCell
      
      let bundle = R.hostingBundle
      let identifier = " "
      let name = "WhitespaceReuseIdentifer"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UITableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UITableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _XibWithViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "Xib with ViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> FirstViewController? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FirstViewController
      }
      
      func secondView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[1] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try main.validate()
      try secondary.validate()
      try specials.validate()
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UITabBarController
      
      let bundle = R.hostingBundle
      let name = "Main"
      let rSTestIdentifier = StoryboardViewControllerResource<UIKit.UIViewController>(identifier: "RSTestIdentifier")
      let swRevealViewController = StoryboardViewControllerResource<SWRevealViewController>(identifier: "swRevealViewController")
      let thirdViewController = StoryboardViewControllerResource<UIKit.UIViewController>(identifier: "thirdViewController")
      
      func rSTestIdentifier(_: Void = ()) -> UIKit.UIViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: rSTestIdentifier)
      }
      
      func swRevealViewController(_: Void = ()) -> SWRevealViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: swRevealViewController)
      }
      
      func thirdViewController(_: Void = ()) -> UIKit.UIViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: thirdViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "User@white") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'User@white' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Second") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Second' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "User@white.png") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'User@white.png' is used in storyboard 'Main', but couldn't be loaded.") }
        if _R.storyboard.main().swRevealViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'swRevealViewController' could not be loaded from storyboard 'Main' as 'SWRevealViewController'.") }
        if _R.storyboard.main().thirdViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'thirdViewController' could not be loaded from storyboard 'Main' as 'UIKit.UIViewController'.") }
        if _R.storyboard.main().rSTestIdentifier() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'rSTestIdentifier' could not be loaded from storyboard 'Main' as 'UIKit.UIViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct references: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = FirstViewController
      
      let bundle = R.hostingBundle
      let name = "References"
      
      fileprivate init() {}
    }
    
    struct secondary: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UITabBarController
      
      let bundle = R.hostingBundle
      let name = "Secondary"
      
      static func validate() throws {
        if UIKit.UIImage(named: "Second") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Second' is used in storyboard 'Secondary', but couldn't be loaded.") }
        if UIKit.UIImage(named: "First") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'First' is used in storyboard 'Secondary', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct specials: Rswift.StoryboardResourceType, Rswift.Validatable {
      let avpVC = StoryboardViewControllerResource<AVKit.AVPlayerViewController>(identifier: "avpVC")
      let bundle = R.hostingBundle
      let glkVC = StoryboardViewControllerResource<GLKit.GLKViewController>(identifier: "glkVC")
      let name = "Specials"
      
      func avpVC(_: Void = ()) -> AVKit.AVPlayerViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: avpVC)
      }
      
      func glkVC(_: Void = ()) -> GLKit.GLKViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: glkVC)
      }
      
      static func validate() throws {
        if _R.storyboard.specials().glkVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'glkVC' could not be loaded from storyboard 'Specials' as 'GLKit.GLKViewController'.") }
        if _R.storyboard.specials().avpVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'avpVC' could not be loaded from storyboard 'Specials' as 'AVKit.AVPlayerViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
